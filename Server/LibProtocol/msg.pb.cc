// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg {
class AccountInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccountInfo> {
} _AccountInfo_default_instance_;
class AccountQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccountQuery> {
} _AccountQuery_default_instance_;
class AccountUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccountUpdate> {
} _AccountUpdate_default_instance_;

namespace protobuf_msg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, create_time_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountQuery, account_list_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountUpdate, account_list_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(AccountInfo)},
  { 13, 19, sizeof(AccountQuery)},
  { 20, 26, sizeof(AccountUpdate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccountInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccountQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccountUpdate_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _AccountInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AccountQuery_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _AccountUpdate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AccountInfo_default_instance_.DefaultConstruct();
  _AccountQuery_default_instance_.DefaultConstruct();
  _AccountUpdate_default_instance_.DefaultConstruct();
  _AccountQuery_default_instance_.get_mutable()->account_list_ = const_cast< ::msg::AccountInfo*>(
      ::msg::AccountInfo::internal_default_instance());
  _AccountUpdate_default_instance_.get_mutable()->account_list_ = const_cast< ::msg::AccountInfo*>(
      ::msg::AccountInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tmsg.proto\022\003msg\"R\n\013AccountInfo\022\n\n\002id\030\001 "
      "\001(\r\022\020\n\010username\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022"
      "\023\n\013create_time\030\004 \001(\r\"6\n\014AccountQuery\022&\n\014"
      "account_list\030\001 \001(\0132\020.msg.AccountInfo\"7\n\r"
      "AccountUpdate\022&\n\014account_list\030\001 \001(\0132\020.ms"
      "g.AccountInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_msg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountInfo::kIdFieldNumber;
const int AccountInfo::kUsernameFieldNumber;
const int AccountInfo::kPasswordFieldNumber;
const int AccountInfo::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountInfo::AccountInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.AccountInfo)
}
AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&id_) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:msg.AccountInfo)
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&id_) + sizeof(create_time_));
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:msg.AccountInfo)
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountInfo& AccountInfo::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccountInfo* AccountInfo::New(::google::protobuf::Arena* arena) const {
  AccountInfo* n = new AccountInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AccountInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_) + sizeof(create_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.AccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg.AccountInfo.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg.AccountInfo.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 create_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_create_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.AccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.AccountInfo)
  return false;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.AccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg.AccountInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg.AccountInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional uint32 create_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.AccountInfo)
}

::google::protobuf::uint8* AccountInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AccountInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg.AccountInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg.AccountInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional uint32 create_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AccountInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AccountInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AccountInfo)
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      create_time_ = from.create_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountInfo::InternalSwap(AccountInfo* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(id_, other->id_);
  std::swap(create_time_, other->create_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountInfo

// optional uint32 id = 1;
bool AccountInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccountInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void AccountInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccountInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 AccountInfo::id() const {
  // @@protoc_insertion_point(field_get:msg.AccountInfo.id)
  return id_;
}
void AccountInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg.AccountInfo.id)
}

// optional string username = 2;
bool AccountInfo::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccountInfo::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
void AccountInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccountInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& AccountInfo::username() const {
  // @@protoc_insertion_point(field_get:msg.AccountInfo.username)
  return username_.GetNoArena();
}
void AccountInfo::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.AccountInfo.username)
}
#if LANG_CXX11
void AccountInfo::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.AccountInfo.username)
}
#endif
void AccountInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.AccountInfo.username)
}
void AccountInfo::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.AccountInfo.username)
}
::std::string* AccountInfo::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:msg.AccountInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_username() {
  // @@protoc_insertion_point(field_release:msg.AccountInfo.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:msg.AccountInfo.username)
}

// optional string password = 3;
bool AccountInfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccountInfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void AccountInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccountInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& AccountInfo::password() const {
  // @@protoc_insertion_point(field_get:msg.AccountInfo.password)
  return password_.GetNoArena();
}
void AccountInfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg.AccountInfo.password)
}
#if LANG_CXX11
void AccountInfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg.AccountInfo.password)
}
#endif
void AccountInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg.AccountInfo.password)
}
void AccountInfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg.AccountInfo.password)
}
::std::string* AccountInfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:msg.AccountInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccountInfo::release_password() {
  // @@protoc_insertion_point(field_release:msg.AccountInfo.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccountInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:msg.AccountInfo.password)
}

// optional uint32 create_time = 4;
bool AccountInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AccountInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
void AccountInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void AccountInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
::google::protobuf::uint32 AccountInfo::create_time() const {
  // @@protoc_insertion_point(field_get:msg.AccountInfo.create_time)
  return create_time_;
}
void AccountInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:msg.AccountInfo.create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountQuery::kAccountListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountQuery::AccountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.AccountQuery)
}
AccountQuery::AccountQuery(const AccountQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_list()) {
    account_list_ = new ::msg::AccountInfo(*from.account_list_);
  } else {
    account_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:msg.AccountQuery)
}

void AccountQuery::SharedCtor() {
  _cached_size_ = 0;
  account_list_ = NULL;
}

AccountQuery::~AccountQuery() {
  // @@protoc_insertion_point(destructor:msg.AccountQuery)
  SharedDtor();
}

void AccountQuery::SharedDtor() {
  if (this != internal_default_instance()) {
    delete account_list_;
  }
}

void AccountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountQuery::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountQuery& AccountQuery::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccountQuery* AccountQuery::New(::google::protobuf::Arena* arena) const {
  AccountQuery* n = new AccountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AccountQuery)
  if (has_account_list()) {
    GOOGLE_DCHECK(account_list_ != NULL);
    account_list_->::msg::AccountInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.AccountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.AccountInfo account_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.AccountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.AccountQuery)
  return false;
#undef DO_
}

void AccountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.AccountQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.AccountInfo account_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->account_list_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.AccountQuery)
}

::google::protobuf::uint8* AccountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AccountQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.AccountInfo account_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->account_list_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AccountQuery)
  return target;
}

size_t AccountQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AccountQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .msg.AccountInfo account_list = 1;
  if (has_account_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AccountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AccountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AccountQuery)
    MergeFrom(*source);
  }
}

void AccountQuery::MergeFrom(const AccountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AccountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_list()) {
    mutable_account_list()->::msg::AccountInfo::MergeFrom(from.account_list());
  }
}

void AccountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AccountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountQuery::CopyFrom(const AccountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AccountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountQuery::IsInitialized() const {
  return true;
}

void AccountQuery::Swap(AccountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountQuery::InternalSwap(AccountQuery* other) {
  std::swap(account_list_, other->account_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountQuery::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountQuery

// optional .msg.AccountInfo account_list = 1;
bool AccountQuery::has_account_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccountQuery::set_has_account_list() {
  _has_bits_[0] |= 0x00000001u;
}
void AccountQuery::clear_has_account_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccountQuery::clear_account_list() {
  if (account_list_ != NULL) account_list_->::msg::AccountInfo::Clear();
  clear_has_account_list();
}
const ::msg::AccountInfo& AccountQuery::account_list() const {
  // @@protoc_insertion_point(field_get:msg.AccountQuery.account_list)
  return account_list_ != NULL ? *account_list_
                         : *::msg::AccountInfo::internal_default_instance();
}
::msg::AccountInfo* AccountQuery::mutable_account_list() {
  set_has_account_list();
  if (account_list_ == NULL) {
    account_list_ = new ::msg::AccountInfo;
  }
  // @@protoc_insertion_point(field_mutable:msg.AccountQuery.account_list)
  return account_list_;
}
::msg::AccountInfo* AccountQuery::release_account_list() {
  // @@protoc_insertion_point(field_release:msg.AccountQuery.account_list)
  clear_has_account_list();
  ::msg::AccountInfo* temp = account_list_;
  account_list_ = NULL;
  return temp;
}
void AccountQuery::set_allocated_account_list(::msg::AccountInfo* account_list) {
  delete account_list_;
  account_list_ = account_list;
  if (account_list) {
    set_has_account_list();
  } else {
    clear_has_account_list();
  }
  // @@protoc_insertion_point(field_set_allocated:msg.AccountQuery.account_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountUpdate::kAccountListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountUpdate::AccountUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.AccountUpdate)
}
AccountUpdate::AccountUpdate(const AccountUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account_list()) {
    account_list_ = new ::msg::AccountInfo(*from.account_list_);
  } else {
    account_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:msg.AccountUpdate)
}

void AccountUpdate::SharedCtor() {
  _cached_size_ = 0;
  account_list_ = NULL;
}

AccountUpdate::~AccountUpdate() {
  // @@protoc_insertion_point(destructor:msg.AccountUpdate)
  SharedDtor();
}

void AccountUpdate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete account_list_;
  }
}

void AccountUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountUpdate::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccountUpdate& AccountUpdate::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccountUpdate* AccountUpdate::New(::google::protobuf::Arena* arena) const {
  AccountUpdate* n = new AccountUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AccountUpdate)
  if (has_account_list()) {
    GOOGLE_DCHECK(account_list_ != NULL);
    account_list_->::msg::AccountInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AccountUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg.AccountUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg.AccountInfo account_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg.AccountUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg.AccountUpdate)
  return false;
#undef DO_
}

void AccountUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg.AccountUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.AccountInfo account_list = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->account_list_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg.AccountUpdate)
}

::google::protobuf::uint8* AccountUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AccountUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.AccountInfo account_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->account_list_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AccountUpdate)
  return target;
}

size_t AccountUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AccountUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .msg.AccountInfo account_list = 1;
  if (has_account_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AccountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AccountUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AccountUpdate)
    MergeFrom(*source);
  }
}

void AccountUpdate::MergeFrom(const AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AccountUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_list()) {
    mutable_account_list()->::msg::AccountInfo::MergeFrom(from.account_list());
  }
}

void AccountUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountUpdate::CopyFrom(const AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountUpdate::IsInitialized() const {
  return true;
}

void AccountUpdate::Swap(AccountUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountUpdate::InternalSwap(AccountUpdate* other) {
  std::swap(account_list_, other->account_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountUpdate::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountUpdate

// optional .msg.AccountInfo account_list = 1;
bool AccountUpdate::has_account_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccountUpdate::set_has_account_list() {
  _has_bits_[0] |= 0x00000001u;
}
void AccountUpdate::clear_has_account_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccountUpdate::clear_account_list() {
  if (account_list_ != NULL) account_list_->::msg::AccountInfo::Clear();
  clear_has_account_list();
}
const ::msg::AccountInfo& AccountUpdate::account_list() const {
  // @@protoc_insertion_point(field_get:msg.AccountUpdate.account_list)
  return account_list_ != NULL ? *account_list_
                         : *::msg::AccountInfo::internal_default_instance();
}
::msg::AccountInfo* AccountUpdate::mutable_account_list() {
  set_has_account_list();
  if (account_list_ == NULL) {
    account_list_ = new ::msg::AccountInfo;
  }
  // @@protoc_insertion_point(field_mutable:msg.AccountUpdate.account_list)
  return account_list_;
}
::msg::AccountInfo* AccountUpdate::release_account_list() {
  // @@protoc_insertion_point(field_release:msg.AccountUpdate.account_list)
  clear_has_account_list();
  ::msg::AccountInfo* temp = account_list_;
  account_list_ = NULL;
  return temp;
}
void AccountUpdate::set_allocated_account_list(::msg::AccountInfo* account_list) {
  delete account_list_;
  account_list_ = account_list;
  if (account_list) {
    set_has_account_list();
  } else {
    clear_has_account_list();
  }
  // @@protoc_insertion_point(field_set_allocated:msg.AccountUpdate.account_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)
